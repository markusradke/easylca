ggplot2::scale_color_manual(values = c('grey35', 'grey90')) +
ggplot2::scale_fill_manual(values = class_colors) +
ggplot2::scale_x_discrete(expand = c(0, 0), position = 'top')+
ggplot2::labs(subtitle = 'P(level | class)',
x = 'level', y = '')+
ggplot2::theme_minimal() +
suppressWarnings(
ggplot2::theme(panel.grid = ggplot2::element_blank(),
legend.position = 'none',
strip.placement = 'inside',
strip.text = ggplot2::element_text(
size = 14,
face = 'bold',
# color = 'grey45',
color = class_colors,
),
axis.text.y = ggplot2::element_text(size = 14),
axis.text.x = ggplot2::element_text(size = 12, color = 'grey45'),
axis.ticks.x = ggplot2::element_blank(),
axis.title.x = ggplot2::element_text(size = 14, color = 'grey45', hjust = 0),
plot.subtitle = ggplot2::element_text(size = 12, hjust = 0))
)
ggplot2::ggplot(data = profiles,
ggplot2::aes(x = forcats::fct_inorder(as.character(.data$level)),
y =  forcats::fct_inorder(as.character(.data$item)),
fill = forcats::fct_inorder(as.character(.data$class))))+
ggplot2::facet_wrap(.~.data$class, ncol = 1)+
ggplot2::geom_tile(ggplot2::aes(alpha = .data$est)) +
ggplot2::geom_text(ggplot2::aes(label = .data$label, color = .data$label_color),
hjust = 0, vjust = 0.5, nudge_x = -0.1) +
ggplot2::scale_color_manual(values = c('grey35', 'grey90')) +
ggplot2::scale_fill_manual(values = class_colors) +
ggplot2::scale_x_discrete(expand = c(0, 0), position = 'top')+
ggplot2::labs(subtitle = 'P(level | class)',
x = 'level', y = '')+
ggplot2::theme_minimal() +
suppressWarnings(
ggplot2::theme(panel.grid = ggplot2::element_blank(),
legend.position = 'none',
strip.placement = 'inside',
strip.text = ggplot2::element_text(
size = 14,
face = 'bold',
# color = 'grey45',
color = class_colors,
),
axis.text.y = ggplot2::element_text(size = 14),
axis.text.x = ggplot2::element_text(size = 12, color = 'grey45'),
axis.ticks.x = ggplot2::element_blank(),
axis.title.x = ggplot2::element_text(size = 14, color = 'grey45', hjust = 0),
plot.subtitle = ggplot2::element_text(size = 14, hjust = 0))
)
ggplot2::ggplot(data = profiles,
ggplot2::aes(x = forcats::fct_inorder(as.character(.data$level)),
y =  forcats::fct_inorder(as.character(.data$item)),
fill = forcats::fct_inorder(as.character(.data$class))))+
ggplot2::facet_wrap(.~.data$class, ncol = 1)+
ggplot2::geom_tile(ggplot2::aes(alpha = .data$est)) +
ggplot2::geom_text(ggplot2::aes(label = .data$label, color = .data$label_color),
hjust = 0, vjust = 0.5, nudge_x = -0.1) +
ggplot2::scale_color_manual(values = c('grey35', 'grey90')) +
ggplot2::scale_fill_manual(values = class_colors) +
ggplot2::scale_x_discrete(expand = c(0, 0), position = 'top')+
ggplot2::labs(subtitle = 'P(level | class)',
x = 'level', y = '')+
ggplot2::theme_minimal() +
suppressWarnings(
ggplot2::theme(panel.grid = ggplot2::element_blank(),
legend.position = 'none',
strip.placement = 'inside',
strip.text = ggplot2::element_text(
size = 14,
face = 'bold',
# color = 'grey45',
color = class_colors,
),
axis.text.y = ggplot2::element_text(size = 12),
axis.text.x = ggplot2::element_text(size = 12, color = 'grey45'),
axis.ticks.x = ggplot2::element_blank(),
axis.title.x = ggplot2::element_text(size = 14, color = 'grey45', hjust = 0),
plot.subtitle = ggplot2::element_text(size = 14, hjust = 0))
)
ggplot2::ggplot(data = profiles,
ggplot2::aes(x = forcats::fct_inorder(as.character(.data$level)),
y =  forcats::fct_inorder(as.character(.data$item)),
fill = forcats::fct_inorder(as.character(.data$class))))+
ggplot2::facet_wrap(.~.data$class, ncol = 1)+
ggplot2::geom_tile(ggplot2::aes(alpha = .data$est)) +
ggplot2::geom_text(ggplot2::aes(label = .data$label, color = .data$label_color),
hjust = 0, vjust = 0.5, nudge_x = -0.1) +
ggplot2::scale_color_manual(values = c('grey35', 'grey90')) +
ggplot2::scale_fill_manual(values = class_colors) +
ggplot2::scale_x_discrete(expand = c(0, 0), position = 'top')+
ggplot2::labs(subtitle = 'P(level | class)',
x = 'level', y = '')+
ggplot2::theme_minimal() +
# suppressWarnings(
ggplot2::theme(panel.grid = ggplot2::element_blank(),
legend.position = 'none',
strip.placement = 'inside',
strip.text = ggplot2::element_text(
size = 14,
face = 'bold',
# color = 'grey45',
color = class_colors,
),
axis.text.y = ggplot2::element_text(size = 12),
axis.text.x = ggplot2::element_text(size = 12, color = 'grey45'),
axis.ticks.x = ggplot2::element_blank(),
axis.title.x = ggplot2::element_text(size = 14, color = 'grey45', hjust = 0),
plot.subtitle = ggplot2::element_text(size = 14, hjust = 0))
ggplot2::ggplot(data = profiles,
ggplot2::aes(x = forcats::fct_inorder(as.character(.data$level)),
y =  forcats::fct_inorder(as.character(.data$item)),
fill = forcats::fct_inorder(as.character(.data$class))))+
ggplot2::facet_wrap(.~.data$class, ncol = 1)+
ggplot2::geom_tile(ggplot2::aes(alpha = .data$est)) +
ggplot2::geom_text(ggplot2::aes(label = .data$label, color = .data$label_color),
hjust = 0, vjust = 0.5, nudge_x = -0.1) +
ggplot2::scale_color_manual(values = c('grey35', 'grey90')) +
ggplot2::scale_fill_manual(values = class_colors) +
ggplot2::scale_x_discrete(expand = c(0, 0), position = 'top')+
ggplot2::labs(subtitle = 'P(level | class)',
x = 'level', y = '')+
ggplot2::theme_minimal() +
suppressWarnings(
ggplot2::theme(panel.grid = ggplot2::element_blank(),
legend.position = 'none',
strip.placement = 'inside',
strip.text = ggplot2::element_text(
size = 14,
face = 'bold',
color = 'black',
# color = class_colors,
),
axis.text.y = ggplot2::element_text(size = 12),
axis.text.x = ggplot2::element_text(size = 12, color = 'grey45'),
axis.ticks.x = ggplot2::element_blank(),
axis.title.x = ggplot2::element_text(size = 14, color = 'grey45', hjust = 0),
plot.subtitle = ggplot2::element_text(size = 14, hjust = 0))
)
load_all()
generate_model_report(titanic_lca_results, 2, 6)
generate_model_report(titanic_lca_results, 2, 6)
generate_model_report(titanic_lca_results, 2, 6)
generate_model_report(titanic_lca_results, 2, 6)
load_all()
generate_model_report(titanic_lca_results, 2, 6)
load_all(); generate_model_report(titanic_lca_results, 2, 6)
load_all(); generate_model_report(titanic_lca_results, 6, 4)
load_all(); generate_model_report(titanic_lca_results, 6, 4)
load_all(); generate_model_report(titanic_lca_results, 2, 6)
load_all(); generate_model_report(titanic_lca_results, 6, 4)
load_all(); generate_model_report(titanic_lca_results, 2, 6)
load_all(); generate_model_report(titanic_lca_results, 6, 4)
generate_model_report(random_testresults, 2, 3)
load_all(); generate_model_report(random_testresults, 2, 3)
check()
use_package('forcats')
check()
check()
library(devtools)
check()
test_active_file()
random_testresults$settings
test_active_file()
check()
test_active_file()
use_test()
test_active_file()
test_active_file()
check()
test <- readRDS("N:/Materialien/Promotion/05_easylca_latent-class-analysis_with-mixed-inidcators/easylca_presentation_R/salzgitter_20250822_20-49/salzgitter_lca_results_rerun-no-7.rds")
generate_model_selection_report(test)
generate_model_report(test, 2, 4)
use_test()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
View(lca)
lca$frame$var2
test_active_file()
test_active_file()
test_active_file()
test_that('binary discrete variabels must be in categorical, not in nominal', {
data <- random_testdata
browser()
expect_error(define_lca(random_testdata, 'test', 'id', nominal = 'var2'),
'Please make sure binary discrete variables are not listed in nominal, but in categorical: var2')
})
expect_error(define_lca(random_testdata, 'test', 'id', nominal = 'var2'),
'Please make sure binary discrete variables are not listed in nominal, but in categorical: var2')
test_active_file()
test_active_file()
generate_model_selection_report(titanic_lca_results)
test()
test()
test_that('get binary indicators returns correct indicators', {
temp_data <- random_testdata[3:5,]
temp_data$var2 <- c(1,2,3)
settings <- define_lca(frame = temp_data,
analysis_name = 'test', id_variable = 'id',
categorical = 'var1',
nominal = 'var2', 'var7')
res <- get_binary_indicators(settings)
browser()
expect_setequal(res, c('var1', 'var2'))
})
test_that('get binary indicators returns correct indicators', {
temp_data <- random_testdata[3:5,]
temp_data$var2 <- c(1,2,3)
settings <- define_lca(frame = temp_data,
analysis_name = 'test', id_variable = 'id',
categorical = c('var1','var2'),
nominal = 'var7')
res <- get_binary_indicators(settings)
expect_setequal(res, c('var1'))
})
test_that('get binary indicators returns correct indicators', {
temp_data <- random_testdata[3:5,]
temp_data$var2 <- c(1,2,3)
settings <- define_lca(frame = temp_data,
analysis_name = 'test', id_variable = 'id',
categorical = c('var1','var2'),
nominal = 'var7')
res <- get_binary_indicators(settings)
expect_setequal(res, c('var1'))
})
test_that('get binary indicators returns correct indicators', {
temp_data <- random_testdata[3:5,]
temp_data$var2 <- c(1,2,3)
browser()
settings <- define_lca(frame = temp_data,
analysis_name = 'test', id_variable = 'id',
categorical = c('var1','var2'),
nominal = 'var7')
res <- get_binary_indicators(settings)
expect_setequal(res, c('var1'))
})
View(temp_data)
test_that('get binary indicators returns correct indicators', {
temp_data <- random_testdata[3:5,]
temp_data$var2 <- c(1,2,3)
temp_data$var7 <- c(1,2,3)
settings <- define_lca(frame = temp_data,
analysis_name = 'test', id_variable = 'id',
categorical = c('var1','var2'),
nominal = 'var7')
res <- get_binary_indicators(settings)
expect_setequal(res, c('var1'))
})
test_that('creates necessary files', {
settings <- define_lca(random_testdata, 'test', 'id')
settings <- settings$vlmrt_last_run <- FALSE
create_templates(settings)
for(i in seq(6)){
model_path <- paste0(settings$folder_name, '/', settings$analysis_name, '_model',  i, '_template.txt')
expect_true(file.exists(model_path),
info = paste0('Did not write file for model ', i, '...'))
}
unlink(settings$folder_name, recursive = T)
})
test_that('creates necessary files', {
settings <- define_lca(random_testdata, 'test', 'id')
settings <- settings$vlmrt_last_run <- FALSE
create_templates(settings)
browser()
for(i in seq(6)){
model_path <- paste0(settings$folder_name, '/', settings$analysis_name, '_model',  i, '_template.txt')
expect_true(file.exists(model_path),
info = paste0('Did not write file for model ', i, '...'))
}
unlink(settings$folder_name, recursive = T)
})
test_that('creates necessary files', {
settings <- define_lca(random_testdata, 'test', 'id')
settings <- settings$vlmrt_last_run <- FALSE
create_templates(settings)
browser()
for(i in seq(6)){
model_path <- paste0(settings$folder_name, '/', settings$analysis_name, '_model',  i, '_template.txt')
expect_true(file.exists(model_path),
info = paste0('Did not write file for model ', i, '...'))
}
unlink(settings$folder_name, recursive = T)
})
test_that('creates necessary files', {
browser()
settings <- define_lca(random_testdata, 'test', 'id')
settings <- settings$vlmrt_last_run <- FALSE
create_templates(settings)
for(i in seq(6)){
model_path <- paste0(settings$folder_name, '/', settings$analysis_name, '_model',  i, '_template.txt')
expect_true(file.exists(model_path),
info = paste0('Did not write file for model ', i, '...'))
}
unlink(settings$folder_name, recursive = T)
})
check()
test()
test_that('creates necessary files', {
settings <- define_lca(random_testdata, 'test', 'id')
settings <- settings$vlmrt_last_run <- FALSE
browser()
create_templates(settings)
for(i in seq(6)){
model_path <- paste0(settings$folder_name, '/', settings$analysis_name, '_model',  i, '_template.txt')
expect_true(file.exists(model_path),
info = paste0('Did not write file for model ', i, '...'))
}
unlink(settings$folder_name, recursive = T)
})
l
load_all();
test_active_file()
force(settings)
test_active_file()
test()
check()
?define_lca
?rerun_lca
document()
?perform_lca
?perform_lca
document()
?define_lca
document()
?define_lca
document()
?define_lca
document()
?define_lca
document()
?perform_lca
document()
?rerun_lca
check()
source("N:/Materialien/Software/easylca/data-raw/write_package_data.R")
load_all()
load_all()
test_active_file()
rm(list=ls())
generate_model_report(titanic_lca_results, 2, 6)
load_all(); generate_model_report(titanic_lca_results, 2, 6)
check()
?tail()
check()
usethis::rename_files('plot_profiles', 'plot_model_report')
test_active_file()
usethis::rename_files('plot_modeloverview', 'plot_model_selection_report')
use_r('plot_data_diagnosis_report')
load_all()
load_all(); generate_model_selection_report(titanic_lca_results)
load_all(); generate_model_selection_report(titanic_lca_results)
load_all(); generate_model_selection_report(titanic_lca_results)
load_all(); generate_model_selection_report(titanic_lca_results)
check()
check()
load_all()
load_all()
test()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
load_all()
tidyr::pivot_longer()
?tidyr::pivot_longer()
load_all()
generate_data_diagnosis_report(titanic_passengers)
rlang::last_trace()
test_active_file()
use_test()
test_active_file()
generate_data_diagnosis_report(titanic_passengers, 'id', 'testresport')
is_file <- file.exists('data_diagnosis_testreport.html')
expect_true(is_file)
test_active_file()
generate_data_diagnosis_report(titanic_passengers, 'id', 'testresport')
load_all(); test_active_file()
load_all(); test_active_file()
test_active_file()
test_active_file()
test_active_file()
load_all()
test_active_file()
test_active_file()
test_active_file()
check()
?IQR
?na.omit
?median
check()
check()
check()
check()
check()#
check()
use_test()
rm(list=ls())
random_testresults()
View(random_testresults)
generate_model_selection_report(random_testresults)
?rerun_lca
results <- rerun_lca(random_testresults,
models_and_starts = data.frame(classes = 4,
modeltype = 1,
starts = 5))
get_path_from_type <- function(settings, type){
paste0(settings$folder_name, '/', settings$analysis_name, '_model', type)
}
if(is_mplus_installed()){
test_that('performs reruns with a higher number of classes', {
results <- rerun_lca(random_testresults,
models_and_starts = data.frame(classes = 4,
modeltype = 1,
starts = 5))
out_path_14 <- paste0(get_path_from_type(settings, 1), '_lca/02_test_model4_lca.out')
expect_true(file.exists(out_path_14))
unlink(settings$folder_name, recursive = T)
})
}
load_all()
if(is_mplus_installed()){
test_that('performs reruns with a higher number of classes', {
results <- rerun_lca(random_testresults,
models_and_starts = data.frame(classes = 4,
modeltype = 1,
starts = 5))
out_path_14 <- paste0(get_path_from_type(settings, 1), '_lca/02_test_model4_lca.out')
expect_true(file.exists(out_path_14))
unlink(settings$folder_name, recursive = T)
})
}
load_all()
if(is_mplus_installed()){
test_that('performs reruns with a higher number of classes', {
results <- rerun_lca(random_testresults,
models_and_starts = data.frame(classes = 4,
modeltype = 1,
starts = 5))
out_path_14 <- paste0(get_path_from_type(settings, 1), '_lca/02_test_model4_lca.out')
expect_true(file.exists(out_path_14))
unlink(settings$folder_name, recursive = T)
})
}
setwd("N:/Materialien/Software/easylca")
if(is_mplus_installed()){
test_that('performs reruns with a higher number of classes', {
results <- rerun_lca(random_testresults,
models_and_starts = data.frame(classes = 4,
modeltype = 1,
starts = 5))
out_path_14 <- paste0(get_path_from_type(settings, 1), '_lca/02_test_model4_lca.out')
expect_true(file.exists(out_path_14))
unlink(settings$folder_name, recursive = T)
})
}
setwd()
setwd("N:/Materialien/Software/easylca")
if(is_mplus_installed()){
test_that('performs reruns with a higher number of classes', {
results <- rerun_lca(random_testresults,
models_and_starts = data.frame(classes = 4,
modeltype = 1,
starts = 5))
out_path_14 <- paste0(get_path_from_type(settings, 1), '_lca/02_test_model4_lca.out')
expect_true(file.exists(out_path_14))
unlink(settings$folder_name, recursive = T)
})
}
load_all()
if(is_mplus_installed()){
test_that('performs reruns with a higher number of classes', {
results <- rerun_lca(random_testresults,
models_and_starts = data.frame(classes = 4,
modeltype = 1,
starts = 5))
out_path_14 <- paste0(get_path_from_type(settings, 1), '_lca/02_test_model4_lca.out')
expect_true(file.exists(out_path_14))
unlink(settings$folder_name, recursive = T)
})
}
force(models)
View(models)
View(models[["modeltype_1"]][["parameters"]][["probability.scale"]])
load_all()
setwd("N:/Materialien/Software/easylca")
if(is_mplus_installed()){
test_that('performs reruns with a higher number of classes', {
results <- rerun_lca(random_testresults,
models_and_starts = data.frame(classes = 4,
modeltype = 1,
starts = 5))
out_path_14 <- paste0(get_path_from_type(settings, 1), '_lca/02_test_model4_lca.out')
expect_true(file.exists(out_path_14))
unlink(settings$folder_name, recursive = T)
})
}
rerun_modeltype <- rerun_mplus_lca_single_model(easylca$settings,
models_and_starts$modeltype[row],
models_and_starts$classes[row])
name_modeltype <- paste0('modeltype_', models_and_starts$modeltype[row])
random_testresults[["models"]][["modeltype_1"]][["test_model1_lca.3_test_model1_lca.out"]][["class_counts"]][["mostLikely"]]
random_testresults[["models"]][["modeltype_1"]][["test_model1_lca.3_test_model1_lca.out"]][["class_counts"]][["classificationProbs.mostLikely"]]
