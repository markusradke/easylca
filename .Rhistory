})
test_that('get binary indicators returns correct indicators', {
temp_data <- random_testdata[3:5,]
temp_data$var2 <- c(1,2,3)
settings <- define_lca(frame = temp_data,
analysis_name = 'test', id_variable = 'id',
categorical = c('var1','var2'),
nominal = 'var7')
res <- get_binary_indicators(settings)
expect_setequal(res, c('var1'))
})
test_that('get binary indicators returns correct indicators', {
temp_data <- random_testdata[3:5,]
temp_data$var2 <- c(1,2,3)
settings <- define_lca(frame = temp_data,
analysis_name = 'test', id_variable = 'id',
categorical = c('var1','var2'),
nominal = 'var7')
res <- get_binary_indicators(settings)
expect_setequal(res, c('var1'))
})
test_that('get binary indicators returns correct indicators', {
temp_data <- random_testdata[3:5,]
temp_data$var2 <- c(1,2,3)
browser()
settings <- define_lca(frame = temp_data,
analysis_name = 'test', id_variable = 'id',
categorical = c('var1','var2'),
nominal = 'var7')
res <- get_binary_indicators(settings)
expect_setequal(res, c('var1'))
})
View(temp_data)
test_that('get binary indicators returns correct indicators', {
temp_data <- random_testdata[3:5,]
temp_data$var2 <- c(1,2,3)
temp_data$var7 <- c(1,2,3)
settings <- define_lca(frame = temp_data,
analysis_name = 'test', id_variable = 'id',
categorical = c('var1','var2'),
nominal = 'var7')
res <- get_binary_indicators(settings)
expect_setequal(res, c('var1'))
})
test_that('creates necessary files', {
settings <- define_lca(random_testdata, 'test', 'id')
settings <- settings$vlmrt_last_run <- FALSE
create_templates(settings)
for(i in seq(6)){
model_path <- paste0(settings$folder_name, '/', settings$analysis_name, '_model',  i, '_template.txt')
expect_true(file.exists(model_path),
info = paste0('Did not write file for model ', i, '...'))
}
unlink(settings$folder_name, recursive = T)
})
test_that('creates necessary files', {
settings <- define_lca(random_testdata, 'test', 'id')
settings <- settings$vlmrt_last_run <- FALSE
create_templates(settings)
browser()
for(i in seq(6)){
model_path <- paste0(settings$folder_name, '/', settings$analysis_name, '_model',  i, '_template.txt')
expect_true(file.exists(model_path),
info = paste0('Did not write file for model ', i, '...'))
}
unlink(settings$folder_name, recursive = T)
})
test_that('creates necessary files', {
settings <- define_lca(random_testdata, 'test', 'id')
settings <- settings$vlmrt_last_run <- FALSE
create_templates(settings)
browser()
for(i in seq(6)){
model_path <- paste0(settings$folder_name, '/', settings$analysis_name, '_model',  i, '_template.txt')
expect_true(file.exists(model_path),
info = paste0('Did not write file for model ', i, '...'))
}
unlink(settings$folder_name, recursive = T)
})
test_that('creates necessary files', {
browser()
settings <- define_lca(random_testdata, 'test', 'id')
settings <- settings$vlmrt_last_run <- FALSE
create_templates(settings)
for(i in seq(6)){
model_path <- paste0(settings$folder_name, '/', settings$analysis_name, '_model',  i, '_template.txt')
expect_true(file.exists(model_path),
info = paste0('Did not write file for model ', i, '...'))
}
unlink(settings$folder_name, recursive = T)
})
check()
test()
test_that('creates necessary files', {
settings <- define_lca(random_testdata, 'test', 'id')
settings <- settings$vlmrt_last_run <- FALSE
browser()
create_templates(settings)
for(i in seq(6)){
model_path <- paste0(settings$folder_name, '/', settings$analysis_name, '_model',  i, '_template.txt')
expect_true(file.exists(model_path),
info = paste0('Did not write file for model ', i, '...'))
}
unlink(settings$folder_name, recursive = T)
})
l
load_all();
test_active_file()
force(settings)
test_active_file()
test()
check()
?define_lca
?rerun_lca
document()
?perform_lca
?perform_lca
document()
?define_lca
document()
?define_lca
document()
?define_lca
document()
?define_lca
document()
?perform_lca
document()
?rerun_lca
check()
source("N:/Materialien/Software/easylca/data-raw/write_package_data.R")
load_all()
load_all()
test_active_file()
rm(list=ls())
generate_model_report(titanic_lca_results, 2, 6)
load_all(); generate_model_report(titanic_lca_results, 2, 6)
check()
?tail()
check()
usethis::rename_files('plot_profiles', 'plot_model_report')
test_active_file()
usethis::rename_files('plot_modeloverview', 'plot_model_selection_report')
use_r('plot_data_diagnosis_report')
load_all()
load_all(); generate_model_selection_report(titanic_lca_results)
load_all(); generate_model_selection_report(titanic_lca_results)
load_all(); generate_model_selection_report(titanic_lca_results)
load_all(); generate_model_selection_report(titanic_lca_results)
check()
check()
load_all()
load_all()
test()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
load_all()
tidyr::pivot_longer()
?tidyr::pivot_longer()
load_all()
generate_data_diagnosis_report(titanic_passengers)
rlang::last_trace()
test_active_file()
use_test()
test_active_file()
generate_data_diagnosis_report(titanic_passengers, 'id', 'testresport')
is_file <- file.exists('data_diagnosis_testreport.html')
expect_true(is_file)
test_active_file()
generate_data_diagnosis_report(titanic_passengers, 'id', 'testresport')
load_all(); test_active_file()
load_all(); test_active_file()
test_active_file()
test_active_file()
test_active_file()
load_all()
test_active_file()
test_active_file()
test_active_file()
check()
?IQR
?na.omit
?median
check()
check()
check()
check()
check()#
check()
use_test()
rm(list=ls())
random_testresults()
View(random_testresults)
generate_model_selection_report(random_testresults)
?rerun_lca
results <- rerun_lca(random_testresults,
models_and_starts = data.frame(classes = 4,
modeltype = 1,
starts = 5))
get_path_from_type <- function(settings, type){
paste0(settings$folder_name, '/', settings$analysis_name, '_model', type)
}
if(is_mplus_installed()){
test_that('performs reruns with a higher number of classes', {
results <- rerun_lca(random_testresults,
models_and_starts = data.frame(classes = 4,
modeltype = 1,
starts = 5))
out_path_14 <- paste0(get_path_from_type(settings, 1), '_lca/02_test_model4_lca.out')
expect_true(file.exists(out_path_14))
unlink(settings$folder_name, recursive = T)
})
}
load_all()
if(is_mplus_installed()){
test_that('performs reruns with a higher number of classes', {
results <- rerun_lca(random_testresults,
models_and_starts = data.frame(classes = 4,
modeltype = 1,
starts = 5))
out_path_14 <- paste0(get_path_from_type(settings, 1), '_lca/02_test_model4_lca.out')
expect_true(file.exists(out_path_14))
unlink(settings$folder_name, recursive = T)
})
}
load_all()
if(is_mplus_installed()){
test_that('performs reruns with a higher number of classes', {
results <- rerun_lca(random_testresults,
models_and_starts = data.frame(classes = 4,
modeltype = 1,
starts = 5))
out_path_14 <- paste0(get_path_from_type(settings, 1), '_lca/02_test_model4_lca.out')
expect_true(file.exists(out_path_14))
unlink(settings$folder_name, recursive = T)
})
}
setwd("N:/Materialien/Software/easylca")
if(is_mplus_installed()){
test_that('performs reruns with a higher number of classes', {
results <- rerun_lca(random_testresults,
models_and_starts = data.frame(classes = 4,
modeltype = 1,
starts = 5))
out_path_14 <- paste0(get_path_from_type(settings, 1), '_lca/02_test_model4_lca.out')
expect_true(file.exists(out_path_14))
unlink(settings$folder_name, recursive = T)
})
}
setwd()
setwd("N:/Materialien/Software/easylca")
if(is_mplus_installed()){
test_that('performs reruns with a higher number of classes', {
results <- rerun_lca(random_testresults,
models_and_starts = data.frame(classes = 4,
modeltype = 1,
starts = 5))
out_path_14 <- paste0(get_path_from_type(settings, 1), '_lca/02_test_model4_lca.out')
expect_true(file.exists(out_path_14))
unlink(settings$folder_name, recursive = T)
})
}
load_all()
if(is_mplus_installed()){
test_that('performs reruns with a higher number of classes', {
results <- rerun_lca(random_testresults,
models_and_starts = data.frame(classes = 4,
modeltype = 1,
starts = 5))
out_path_14 <- paste0(get_path_from_type(settings, 1), '_lca/02_test_model4_lca.out')
expect_true(file.exists(out_path_14))
unlink(settings$folder_name, recursive = T)
})
}
force(models)
View(models)
View(models[["modeltype_1"]][["parameters"]][["probability.scale"]])
load_all()
setwd("N:/Materialien/Software/easylca")
if(is_mplus_installed()){
test_that('performs reruns with a higher number of classes', {
results <- rerun_lca(random_testresults,
models_and_starts = data.frame(classes = 4,
modeltype = 1,
starts = 5))
out_path_14 <- paste0(get_path_from_type(settings, 1), '_lca/02_test_model4_lca.out')
expect_true(file.exists(out_path_14))
unlink(settings$folder_name, recursive = T)
})
}
rerun_modeltype <- rerun_mplus_lca_single_model(easylca$settings,
models_and_starts$modeltype[row],
models_and_starts$classes[row])
name_modeltype <- paste0('modeltype_', models_and_starts$modeltype[row])
random_testresults[["models"]][["modeltype_1"]][["test_model1_lca.3_test_model1_lca.out"]][["class_counts"]][["mostLikely"]]
random_testresults[["models"]][["modeltype_1"]][["test_model1_lca.3_test_model1_lca.out"]][["class_counts"]][["classificationProbs.mostLikely"]]
library(devtools)
use_r('read_models')
test_active_file()
use_test(read_models())
use_test(read_models)
use_test('read_models')
settings <- define_lca(random_testdata, 'read_models_test', id_variable = 'id', use = c('var1', 'var7'),
categorical = 'var1', nclasses = 2, starts = 5, cores = 64)
message('Performing test LCA...')
capture.output(perform_lca(settings, modeltypes = c(1, 3)))
message('Reading test LCA folder...')
lca <- suppressMessages(read_models(settings))
View(settings)
View(lca)
capture.output(perform_lca(settings, modeltypes = c(1, 3)))
use_test()
capture.output(perform_lca(settings, modeltypes = c(1, 3)))
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
use_test()
test_active_file()
use_r('create_templates')
use_test()
test_active_file()
test_active_file()
use_r()
use_r('create_templates')
test_active_file()
test_active_file()
?file.copy()
setwd("N:/Materialien/Software/easylca")
test_active_file()
test_active_file()
warnings()
rm(list=ls())
setwd("N:/Materialien/Software/easylca")
test_active_file()
files <- list.files(settings$folder_name)
files
template_files <- files[stringr::str_detect(files, 'template.txt')]
lapply(template_files, file.remove)
lapply(template_files, function(file) paste0(settings$foldername, file) %>% file.remove)
lapply(template_files, function(file) paste0(settings$foldername, '/' file) %>% file.remove)
lapply(template_files, function(file) paste0(settings$foldername, '/', file) %>% file.remove)
?list.files()
files <- list.files(settings$folder_name, full.names = TRUE)
template_files <- files[stringr::str_detect(files, 'template.txt')]
template_files
lapply(template_files, file.remove)
setwd("N:/Materialien/Software/easylca")
test_active_file()
input <- sprintf('%s%.2d_classes.inp', model_path, class)
setwd("N:/Materialien/Software/easylca")
test_active_file()
test_active_file()
use_r('read_models')
use_test()
test_active_file()
use_r('perform_lca')
test_active_file()
test_active_file()
use_test()
use_test()
test_active_file()
View(lca)
?MplusAutomation::readModels
test_active_file()
test_active_file()
use_test('rerun_models')
source("N:/Materialien/Software/easylca/tests/testthat/test-rerun_lca.R")
test_active_file()
setwd("N:/Materialien/Software/easylca")
test_active_file()
test_active_file()
setwd("N:/Materialien/Software/easylca")
test_active_file()
setwd("N:/Materialien/Software/easylca")
test_active_file()
setwd("N:/Materialien/Software/easylca")
test_active_file()
test_active_file()
test_active_file()
test_active_file()
sprintf('%s/%s_template.txt', model_path,
model_path)
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
rm(list=ls())
check(9)
check()
use_test()
test_active_file()
source("N:/Materialien/Software/easylca/R/rerun_lca.R")
rm(list=ls())
test_active_file()
View(mplus_results)
View(mplus_results)
setwd("N:/Materialien/Software/easylca")
test_active_file()
View(mplus_results)
test_active_file()
models_in_easylca <- names(easylca$models[[sprintf('modeltype_%d', modeltype)]])
models_for_type <- easylca$models[[sprintf('modeltype_%d', modeltype)]]
models_for_type[[names(mplus_results)]] <- mplus_results
models_for_type <- easylca$models[[sprintf('modeltype_%d', modeltype)]]
models_for_type[[names(mplus_results)]] <- mplus_results
View(models_for_type)
testsettings <- define_lca(random_testdata, 'test','id', nclasses = 3, starts = 20L, cores = 16,
use = c('var1', 'var3', 'var4', 'var5', 'var6', 'var7', 'var8'),
categorical = c('var1'),
censored_above = c('var6'),
censored_below = c('var3', 'var4'),
poisson = 'var8',
negbin = 'var7',
inflated = c('var7', 'var4'))
random_testresults <- perform_lca(testsettings)
saveRDS(random_testresults, 'data-raw/testresults.rds')
source("N:/Materialien/Software/easylca/data-raw/write_package_data.R")
rm(list=ls())
test_active_file()
View(models_for_type)
test_active_file()
test_active_file()
mplus_results <- MplusAutomation::readModels(type_folder, recursive = TRUE)
models_for_type[[names(mplus_results)]] <- list(mplus_results)
models_for_type[[names(mplus_results)]] <- mplus_results
model_name <- sprintf('%s.%.2d_classes.out',
sprintf('modeltype_%.2d', modeltype),
class)
models_for_type[[model_name]] <- mplus_results
View(models_for_type)
model_name <- sprintf('modeltype_d%.%.2d_classes.out',
modeltype,
class)
model_name <- sprintf('modeltype_%d.%.2d_classes.out',
modeltype,
class)
models_for_type <- easylca$models[[sprintf('modeltype_%d', modeltype)]]
models_for_type[[model_name]] <- mplus_results
View(models_for_type)
test_active_file()
test_active_file()
test_active_file()
test_active_file()
View(easylca)
test_active_file()
test_active_file()
View(easylca)
test_active_file()
test_active_file()
View(easylca)
View(easylca)
?apply
test_active_file()
mplus_results <- make_list_if_only_one_model(mplus_results)
rm(make_list_if_only_one_model())
rm(make_list_if_only_one_model
)
models_for_type <- easylca$models[[sprintf('modeltype_%d', modeltype)]]
View(models_for_type)
lapply(names(mplus_results),
function(model_name){
models_for_type[[model_name]] <- mplus_results[[model_name]]
})
View(models_for_type)
test_active_file()
test_active_file()
View(mplus_results)
View(models_for_type)
models_for_type <<- easylca$models[[sprintf('modeltype_%d', modeltype)]]
lapply(names(mplus_results),
function(model_name){
models_for_type[[model_name]] <- mplus_results[[model_name]]
})
lapply(names(mplus_results),
function(model_name){
models_for_type[[model_name]] <<- mplus_results[[model_name]]
})
View(models_for_type)
test_active_file()
test_active_file()
test_active_file()
use_r('read_models')
test_active_file()
test_active_file()
settings$folder_name
check(
check()
beepr::beep(sound = 3)
use_r('generate_model_report')
test_active_file
test_active_file()
setwd("N:/Materialien/Software/easylca")
setwd("N:/Materialien/Software/easylca")
test_active_file()
check(); beepr::beep(sound = 3)
check(); beepr::beep(sound = 3)
?modifyList()
check(); beepr::beep(sound = 3)
rm(list = ls())
check(); beepr::beep(sound = 3)
