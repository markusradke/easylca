show_model(4, 2)
show_model(lca_, 4, 2)
rm(list=ls())
?rerun_lca
document()
?rerun_lca
document()
use_test('perform_lca')
test()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
devtools::install()
devtools::install()
install()
devtools::install()
devtools::install()
load_all()
library(devtools)
load_all()
library(devtools)
load_all()
install()
pca_firstcomponent_woutlang_model1 <- readRDS("N:/Materialien/Promotion/202411 Genre_Taxonomien_Vorstudie_Zürich/202409_genre_taxonomies/pca_firstcomponent_woutlang_20241028_09-12/pca_firstcomponent_woutlang_model1_lca/pca_firstcomponent_woutlang_model1.rds")
model <- pca_firstcomponent_woutlang_model1[[1]]
plot_kruskal_profiles(model)
library(devtools)
load_all()
plot_kruskal_profiles(model)
plot_kruskal_profiles(pca_firstcomponent_woutlang_model1[[2]])
plot_kruskal_profiles(pca_firstcomponent_woutlang_model1[[3]])
plot_kruskal_profiles(pca_firstcomponent_woutlang_model1[[4]])
model <- pca_firstcomponent_woutlang_model1[[""]]
model <- pca_firstcomponent_woutlang_model1[[2]]
predicted <- model$savedata
items <- model$input$variable$usevariables %>% stringr::str_split_1(' ')
nitems <- items %>% length
chisquares <- .get_kruskal_chisquares()
.get_kruskal_chisquares <- function(){
data.frame(item = items) %>%
dplyr::filter(!stringr::str_detect(item, '#1')) %>%
dplyr::mutate(item = as.character(item),
chisquare = purrr::map_dbl(item, .get_kruskal_chisquare_from_prediction_for_item),
p = purrr::map_chr(item, .get_kruskal_p_from_prediction_for_item),
chisquarep = paste0(chisquare, p)) %>%
dplyr::arrange(-chisquare)
}
chisquares <- .get_kruskal_chisquares()
.get_kruskal_p_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return('') }
pvalue <- stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$p.value
pvalue <- pvalue * nitems # Bonferroni
if(pvalue > 0.05){return('')}
if(pvalue > 0.05){return('*')}
if(pvalue > 0.01){return('**')}
return('***')
}
.get_kruskal_chisquare_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return(0) }
stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$statistic[[1]] %>%
round(2)
}
chisquares <- .get_kruskal_chisquares()
data.frame(item = items) %>%
dplyr::filter(!stringr::str_detect(item, '#1')) %>%
dplyr::mutate(item = as.character(item),
chisquare = purrr::map_dbl(item, .get_kruskal_chisquare_from_prediction_for_item),
p = purrr::map_chr(item, .get_kruskal_p_from_prediction_for_item),
chisquarep = paste0(chisquare, p)) %>%
dplyr::arrange(-chisquare)
data.frame(item = items) %>%
dplyr::filter(!stringr::str_detect(item, '#1'))
items
model$input$variable$usevariables
pca_firstcomponent_woutlang_model1[[1]$input$variable$usevariables
pca_firstcomponent_woutlang_model1[[1]]$input$variable$usevariables
pca_firstcomponent_woutlang_model1[[1]]$input$variable$usevariables %>% stringr::str_split_1(' ')
model_1 <- pca_firstcomponent_woutlang_model1[[1]]
model_2 <- model
model <- model_1
predicted <- model$savedata
items <- model$input$variable$usevariables %>% stringr::str_split_1(' ')
nitems <- items %>% length
chisquares <- .get_kruskal_chisquares()
lca_data_pcaselection_firstcomponent <- readRDS("N:/Materialien/Promotion/202411 Genre_Taxonomien_Vorstudie_Zürich/202409_genre_taxonomies/data/4_folds/lca_data_pcaselection_firstcomponent.rds")
items <- model$input$variable$usevariables %>% stringr::str_split_1(' ')
items
items %>% stringr::str_subset('', negate = T)
items[item != '']
items[items != '']
items[items != ''] %>% length
predicted <- model$savedata
items <- model$input$variable$usevariables %>% stringr::str_split_1(' ')
items  <- items[items != '']
nitems <- items %>% length
chisquares <- .get_kruskal_chisquares()
max_chi_square <- chisquares$chisquare %>% max
plot_kruskal_profiles(model)
plot_kruskal_profiles(model_2)
plot_kruskal_profiles <- function(model){
.get_kruskal_chisquare_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return(0) }
stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$statistic[[1]] %>%
round(2)
}
.get_kruskal_p_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return('') }
pvalue <- stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$p.value
pvalue <- pvalue * nitems # Bonferroni
if(pvalue > 0.05){return('')}
if(pvalue > 0.05){return('*')}
if(pvalue > 0.01){return('**')}
return('***')
}
.get_kruskal_chisquares <- function(){
data.frame(item = items) %>%
dplyr::filter(!stringr::str_detect(item, '#1')) %>%
dplyr::mutate(item = as.character(item),
chisquare = purrr::map_dbl(item, .get_kruskal_chisquare_from_prediction_for_item),
p = purrr::map_chr(item, .get_kruskal_p_from_prediction_for_item),
chisquarep = paste0(chisquare, p)) %>%
dplyr::arrange(-chisquare)
}
predicted <- model$savedata
items <- model$input$variable$usevariables %>% stringr::str_split_1(' ')
items  <- items[items != '']
nitems <- items %>% length
chisquares <- .get_kruskal_chisquares()
max_chi_square <- chisquares$chisquare %>% max
total_entropy <- model$summaries$Entropy
suppressWarnings(
ggplot2::ggplot(chisquares, ggplot2::aes(y = stats::reorder(item, chisquare), x = chisquare)) +
ggplot2::geom_bar(stat = 'identity', fill = 'white', color = 'black') +
ggplot2::geom_text(ggplot2::aes(label = chisquarep), hjust = -0.25, size = 3) +
ggplot2::scale_x_continuous(limits = c(0, max_chi_square * 1.5)) +
ggplot2::labs(title = paste0('Indicator Relevance, Total Entropy: ', total_entropy),
x = 'Kruskal-Wallis χ²',
y = 'indicator',
caption = '* p < 0.05, **  p < 0.01, *** p < 0.001, Bonferroni corrected')
)
}
plot_kruskal_profiles(model_2)
model <- model_2
predicted <- model$savedata
items <- model$input$variable$usevariables %>% stringr::str_split_1(' ')
items  <- items[items != '']
nitems <- items %>% length
chisquares <- .get_kruskal_chisquares()
data.frame(item = items) %>%
dplyr::filter(!stringr::str_detect(item, '#1'))
item <- 'scnrock'
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return(0) }
stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$statistic[[1]] %>%
round(2)
View(predicted)
predicted[[toupper(item)]]
predicted[[toupper(item)]] %>% length()
predicted[['CLASS']]
View(model_1)
View(model_2)
install()
load_all()
plot_kruskal_profiles(model_1)
plot_kruskal_profiles(model_2)
predicted[['CLASS']]
plot_kruskal_profiles <- function(model){
.get_kruskal_chisquare_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return(0) }
stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$statistic[[1]] %>%
round(2)
}
.get_kruskal_p_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return('') }
pvalue <- stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$p.value
pvalue <- pvalue * nitems # Bonferroni
if(pvalue > 0.05){return('')}
if(pvalue > 0.05){return('*')}
if(pvalue > 0.01){return('**')}
return('***')
}
.get_kruskal_chisquares <- function(){
data.frame(item = items) %>%
dplyr::filter(!stringr::str_detect(item, '#1')) %>%
dplyr::mutate(item = as.character(item),
chisquare = purrr::map_dbl(item, .get_kruskal_chisquare_from_prediction_for_item),
p = purrr::map_chr(item, .get_kruskal_p_from_prediction_for_item),
chisquarep = paste0(chisquare, p)) %>%
dplyr::arrange(-chisquare)
}
predicted <- model$savedata
if(is.null(predicted[['CLASS']])) {
warning('CLASS PREDICTIONS WERE NOT STORED BY MPLUS. Check Model outputs for any further hints.')
predicted[['CLASS']] == 1
}
items <- model$input$variable$usevariables %>% stringr::str_split_1(' ')
items  <- items[items != '']
nitems <- items %>% length
chisquares <- .get_kruskal_chisquares()
max_chi_square <- chisquares$chisquare %>% max
total_entropy <- model$summaries$Entropy
suppressWarnings(
ggplot2::ggplot(chisquares, ggplot2::aes(y = stats::reorder(item, chisquare), x = chisquare)) +
ggplot2::geom_bar(stat = 'identity', fill = 'white', color = 'black') +
ggplot2::geom_text(ggplot2::aes(label = chisquarep), hjust = -0.25, size = 3) +
ggplot2::scale_x_continuous(limits = c(0, max_chi_square * 1.5)) +
ggplot2::labs(title = paste0('Indicator Relevance, Total Entropy: ', total_entropy),
x = 'Kruskal-Wallis χ²',
y = 'indicator',
caption = '* p < 0.05, **  p < 0.01, *** p < 0.001, Bonferroni corrected')
)
}
plot_kruskal_profiles(model_1)
plot_kruskal_profiles(model_2)
plot_kruskal_profiles <- function(model){
.get_kruskal_chisquare_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
print(are_all_in_same_class)
if(are_all_in_same_class){ return(0) }
stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$statistic[[1]] %>%
round(2)
}
.get_kruskal_p_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return('') }
pvalue <- stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$p.value
pvalue <- pvalue * nitems # Bonferroni
if(pvalue > 0.05){return('')}
if(pvalue > 0.05){return('*')}
if(pvalue > 0.01){return('**')}
return('***')
}
.get_kruskal_chisquares <- function(){
data.frame(item = items) %>%
dplyr::filter(!stringr::str_detect(item, '#1')) %>%
dplyr::mutate(item = as.character(item),
chisquare = purrr::map_dbl(item, .get_kruskal_chisquare_from_prediction_for_item),
p = purrr::map_chr(item, .get_kruskal_p_from_prediction_for_item),
chisquarep = paste0(chisquare, p)) %>%
dplyr::arrange(-chisquare)
}
predicted <- model$savedata
if(is.null(predicted[['CLASS']])) {
warning('CLASS PREDICTIONS WERE NOT STORED BY MPLUS. Check Model outputs for any further hints.')
predicted[['CLASS']] == 1
}
items <- model$input$variable$usevariables %>% stringr::str_split_1(' ')
items  <- items[items != '']
nitems <- items %>% length
chisquares <- .get_kruskal_chisquares()
max_chi_square <- chisquares$chisquare %>% max
total_entropy <- model$summaries$Entropy
suppressWarnings(
ggplot2::ggplot(chisquares, ggplot2::aes(y = stats::reorder(item, chisquare), x = chisquare)) +
ggplot2::geom_bar(stat = 'identity', fill = 'white', color = 'black') +
ggplot2::geom_text(ggplot2::aes(label = chisquarep), hjust = -0.25, size = 3) +
ggplot2::scale_x_continuous(limits = c(0, max_chi_square * 1.5)) +
ggplot2::labs(title = paste0('Indicator Relevance, Total Entropy: ', total_entropy),
x = 'Kruskal-Wallis χ²',
y = 'indicator',
caption = '* p < 0.05, **  p < 0.01, *** p < 0.001, Bonferroni corrected')
)
}
plot_kruskal_profiles(model_1)
plot_kruskal_profiles(model_2)
plot_kruskal_profiles <- function(model){
.get_kruskal_chisquare_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
print(are_all_in_same_class)
if(are_all_in_same_class){ return(0) }
stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$statistic[[1]] %>%
round(2)
}
.get_kruskal_p_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return('') }
pvalue <- stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$p.value
pvalue <- pvalue * nitems # Bonferroni
if(pvalue > 0.05){return('')}
if(pvalue > 0.05){return('*')}
if(pvalue > 0.01){return('**')}
return('***')
}
.get_kruskal_chisquares <- function(){
data.frame(item = items) %>%
dplyr::filter(!stringr::str_detect(item, '#1')) %>%
dplyr::mutate(item = as.character(item),
chisquare = purrr::map_dbl(item, .get_kruskal_chisquare_from_prediction_for_item),
p = purrr::map_chr(item, .get_kruskal_p_from_prediction_for_item),
chisquarep = paste0(chisquare, p)) %>%
dplyr::arrange(-chisquare)
}
predicted <- model$savedata
if(is.null(predicted[['CLASS']])) {
warning('CLASS PREDICTIONS WERE NOT STORED BY MPLUS. Check Model outputs for any further hints.')
predicted[['CLASS']] <- 1
}
items <- model$input$variable$usevariables %>% stringr::str_split_1(' ')
items  <- items[items != '']
nitems <- items %>% length
chisquares <- .get_kruskal_chisquares()
max_chi_square <- chisquares$chisquare %>% max
total_entropy <- model$summaries$Entropy
suppressWarnings(
ggplot2::ggplot(chisquares, ggplot2::aes(y = stats::reorder(item, chisquare), x = chisquare)) +
ggplot2::geom_bar(stat = 'identity', fill = 'white', color = 'black') +
ggplot2::geom_text(ggplot2::aes(label = chisquarep), hjust = -0.25, size = 3) +
ggplot2::scale_x_continuous(limits = c(0, max_chi_square * 1.5)) +
ggplot2::labs(title = paste0('Indicator Relevance, Total Entropy: ', total_entropy),
x = 'Kruskal-Wallis χ²',
y = 'indicator',
caption = '* p < 0.05, **  p < 0.01, *** p < 0.001, Bonferroni corrected')
)
}
plot_kruskal_profiles(model_2)
load_all()
model_2$summaries$Title
loac
load_all()
plot_kruskal_profiles(model_2)
plot_kruskal_profiles <- function(model){
.get_kruskal_chisquare_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return(0) }
stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$statistic[[1]] %>%
round(2)
}
.get_kruskal_p_from_prediction_for_item <- function(item){
are_all_in_same_class <- predicted[['CLASS']] %>% unique() %>% length() == 1
if(are_all_in_same_class){ return('') }
pvalue <- stats::kruskal.test(predicted[[toupper(item)]], predicted[['CLASS']])$p.value
pvalue <- pvalue * nitems # Bonferroni
if(pvalue > 0.05){return('')}
if(pvalue > 0.05){return('*')}
if(pvalue > 0.01){return('**')}
return('***')
}
.get_kruskal_chisquares <- function(){
data.frame(item = items) %>%
dplyr::filter(!stringr::str_detect(item, '#1')) %>%
dplyr::mutate(item = as.character(item),
chisquare = purrr::map_dbl(item, .get_kruskal_chisquare_from_prediction_for_item),
p = purrr::map_chr(item, .get_kruskal_p_from_prediction_for_item),
chisquarep = paste0(chisquare, p)) %>%
dplyr::arrange(-chisquare)
}
predicted <- model$savedata
if(is.null(predicted[['CLASS']])) {
warning(paste0('CLASS PREDICTIONS FOR ',
model$summaries$Title
,' WERE NOT STORED BY MPLUS. Check Model outputs for any further hints.'))
predicted[['CLASS']] <- 1
}
items <- model$input$variable$usevariables %>% stringr::str_split_1(' ')
items  <- items[items != '']
nitems <- items %>% length
chisquares <- .get_kruskal_chisquares()
max_chi_square <- chisquares$chisquare %>% max
total_entropy <- model$summaries$Entropy
suppressWarnings(
ggplot2::ggplot(chisquares, ggplot2::aes(y = stats::reorder(item, chisquare), x = chisquare)) +
ggplot2::geom_bar(stat = 'identity', fill = 'white', color = 'black') +
ggplot2::geom_text(ggplot2::aes(label = chisquarep), hjust = -0.25, size = 3) +
ggplot2::scale_x_continuous(limits = c(0, max_chi_square * 1.5)) +
ggplot2::labs(title = paste0('Indicator Relevance, Total Entropy: ', total_entropy),
x = 'Kruskal-Wallis χ²',
y = 'indicator',
caption = '* p < 0.05, **  p < 0.01, *** p < 0.001, Bonferroni corrected')
)
}
plot_kruskal_profiles(model_2)
install()
rm(list=ls())
remove.packages('easylca')
install_github('markusradke/easylca')
sprintf("%02d", 1)
sprintf("%02d", 12)
sprintf("%02d", 9)
library(devtools)
load_all8
load_all()
test_active_file()
use_test()
use_r('create_templates')
test_active_file()
test_active_file()
test_active_file()
test_active_file()
use_r('perform_lca')
use_test()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
?MplusAutomation::createModels(
?MplusAutomation::createModels
vignette("Vignette", package="MplusAutomation")
toString(c('a', 'b', 'c'))
paste(c('a', 'b', 'c'), collapse = "")
paste(c('a', 'b', 'c'), collapse = " ")
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_lca_results <- readRDS("N:/Materialien/R_packages/easylca/tests/testthat/test_20241029_15-08/test_lca_results.rds")
View(test_lca_results)
View(test_lca_results[["summary"]])
View(test_lca_results)
rm(list=ls())
gc(
)
gc()
devtools::load_all()
devtools::document()
library(devtools)
load_all()
res <- readRDS("N:/Materialien/Promotion/202411_Genre_Taxonomien_Vorstudie_Zürich/202409_genre_taxonomies/models/lca_models/pca_firstcomponent_woutlang_20250329_05-12/pca_firstcomponent_woutlang_lca_results.rds")
settings <- res$settings
rm(res)
View(settings)
View(settings)
setwd("N:/Materialien/Promotion/202411_Genre_Taxonomien_Vorstudie_Zürich/202409_genre_taxonomies/models/lca_models")
results <- read_models(settings)
setwd("N:/Materialien/Promotion/202411_Genre_Taxonomien_Vorstudie_Zürich/202409_genre_taxonomies/models/lca_models/pca_firstcomponent_woutlang_20250329_05-12")
library(devtools)
load_all()
setwd("N:/Materialien/R/easylca")
load_all()
res <- readRDS("N:/Materialien/R/easylca/pca_firstcomponent_woutlang_20250329_05-12/pca_firstcomponent_woutlang_lca_results.rds")
settings <- res$settings
rm(res)
read_models(res)
read_models(settings)
load_all()
read_models(settings)
getwd
getwd()
setwd(..)
setwd()
setwd('..')
getwd()
read_models(settings)
reszuerich <- readRDS("N:/Materialien/Promotion/202411_Genre_Taxonomien_Vorstudie_Zürich/202409_genre_taxonomies/models/lca_models/_alt/pca_firstcomponent_lca_results.rds")
View(reszuerich)
rm(reszuerich)
length('pca_firstcomponent_woutlang_model1_lca/pca_firstcomponent_woutlang_model1_lca_11.dat SAVE = cprobabilites bchweight')
stringr::str_length('pca_firstcomponent_woutlang_model1_lca/pca_firstcomponent_woutlang_model1_lca_11.dat SAVE = cprobabilites bchweight')
View(mplus_results)
read_models(settings)
setwd('..')
read_models(settings)
read_models(settings)
setwd('..')
read_models(settings)
setwd('..')
read_models(settings)
stringr::str_length('pca_firstcomponent_woutlang_model1_lca_10.dat SAVE = cprobabilites bchweight')
stringr::str_length('pca_firstcomponent_woutlang_model1_lca_9.dat SAVE = cprobabilites bchweights')
setwd('..')
read_models(settings)
View(mplus_results)
load_all()
read_models(settings)
getwd()
setwd('..')
read_models(settings)
View(models)
View(models)
View(models)
result <- readRDS("N:/Materialien/R/easylca/pca_firstcomponent_woutlang_20250329_05-12/pca_firstcomponent_woutlang_lca_results.rds")
rm(models)
View(result)
result
View(result)
result$summary %>% View()
library(devtools)
use_r('define_lca')
test_active_file()
use_test('define_lca')
testdata
data <- testdata
data['var2', 1] <- NA
View(data)
data[1, 'var2'] <- NA
data <- testdata
data[1, 'var2'] <- NA
View(data)
testdata
test_active_file()
test_active_file()
test_active_file()
define_lca(data, 'test', 'id', categorical = 'var2')
test_active_file()
test <- c(NA, 1, 3)
col <- test
rm(testdata)
rm(test)
rm(data)
is.na(col) | (col >= 1 & col == floor(col))
(col >= 1 & col == floor(col))
install()
install()
